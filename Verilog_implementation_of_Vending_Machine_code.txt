`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company:  Puducherry Technological University(PTU)
// Engineer: Dheepak_G
// 
// Create Date:    12:49:50 07/17/2021 
// Design Name: 
// Module Name:    Vending_machine_3ip 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module Vending_machine_3ip( 
				input [1:0] coin_ip, //coin_ip is given as input ,Quarter -00(consider value of 5),Dime -01(consider value of 10),Nickel -11 (consider value of 15)
				input Coin,		//Coin signal is given as coin_ip sensing signal
				input Resetn,		//Resetn to reset the circuit
				output reg Z		//output assigned as register  Z 
				
    );
parameter s0=3'b000;				//parameter assignement 
parameter s1=3'b001;				//parameter assignement
parameter s2=3'b010;				//parameter assignement
parameter s3=3'b011;				//parameter assignement
parameter s4=3'b100;				//parameter assignement
parameter s5=3'b101;				//parameter assignement
parameter s6=3'b110;				//parameter assignement
reg [2:0]p_s;						//present state register 
reg [2:0]n_s;						//next state register
reg o;								//register o to vertex of the state shift
always@(posedge Coin,negedge Resetn)//Reset is negedge as instructed to have active low reset signal. and clock is assigned as posedge
begin 
	if(Resetn==1'b0)				//condition to check whether reset condition is invoked
	begin
		Z<=1'b0;						//assign output as Zero
		p_s<=1'b0;					//assign present state as Zero
	end
	else								// if reset is not invoked 
	begin
		p_s<=n_s;					//passes the next state to present state
		Z<=o;							//then the output is given
	end
end
always@(p_s,coin_ip)					//Assigned EVENTS  are Present state and Coin input( i.e Quarter -00(consider value of 5),Dime -01(consider value of 10),Nickel -11 (consider value of 15)) 
begin
	case(p_s)						//Expression for case is Present state
		s0:if(coin_ip==2'b00)		//checks whether Quarter -00(consider value of 5)
				begin
					n_s<=s1;
					o<=1'b0;
				end
			else if(coin_ip==2'b01)	//checks whether Dime -01(consider value of 10)
				begin
					n_s<=s2;
					o<=1'b0;
					end
			else if(coin_ip==2'b11)//checks whether Nickel -11 (consider value of 15)
				begin
					n_s<=s3;
					o<=1'b0;
				end
			else 
				begin 			//else assign 0 to output
					n_s<=s0;
					o<=1'b0;
				end
		s1:if(coin_ip==2'b00)//checks whether Quarter -00(consider value of 5)
				begin
					n_s<=s2;
					o<=1'b0;
				end
			else if(coin_ip==2'b01)//checks whether Dime -01(consider value of 10)
				begin
					n_s<=s3;
					o<=1'b0;
				end
			else if(coin_ip==2'b11)//checks whether Nickel -11 (consider value of 15)
				begin 
					n_s<=s4;
					o<=1'b0;
				end
			else					//else assign 0 to output
				begin
					n_s<=s1;
					o<=1'b0;
				end
		s2:if(coin_ip==2'b00)//checks whether Quarter -00(consider value of 5)
				begin
					n_s<=s3;
					o<=1'b0;
				end
			else if(coin_ip==2'b01)//checks whether Dime -01(consider value of 10)
				begin
					n_s<=s4;
					o<=1'b0;
				end
			else if(coin_ip==2'b11)//checks whether Nickel -11 (consider value of 15)
				begin
					n_s<=s5;
					o<=1'b0;
				end
			else				//else assign 0 to output	
				begin
					n_s<=s2;
					o<=1'b0;
				end
		s3:if(coin_ip==2'b00)//checks whether Quarter -00(consider value of 5)
				begin
					n_s<=s4;
					o<=1'b0;
				end
			else if(coin_ip==2'b01)//checks whether Dime -01(consider value of 10)
				begin
					n_s<=s5;
					o<=1'b0;
				end
			else if(coin_ip==2'b11)//checks whether Nickel -11 (consider value of 15)
				begin
					n_s<=s6;
					o<=1'b1;
				end
			else					//else assign 0 to output
				begin
					n_s<=s3;
					o<=1'b0;
				end
		s4:if(coin_ip==2'b00)//checks whether Quarter -00(consider value of 5)
				begin
					n_s<=s5;
					o<=1'b0;
				end
			else if(coin_ip==2'b01)//checks whether Dime -01(consider value of 10)
				begin
					n_s<=s6;
					o<=1'b1;
				end
			else if(coin_ip==2'b11)//checks whether Nickel -11 (consider value of 15)
				begin
					n_s<=s6;
					o<=1'b1;
				end
			else					//else assign 0 to output
				begin
					n_s<=s4;
					o<=1'b0;
				end
		s5:if(coin_ip==2'b00)//checks whether Quarter -00(consider value of 5)
				begin
					n_s<=s6;
					o<=1'b1;
				end
			else if(coin_ip==2'b01)//checks whether Dime -01(consider value of 10)
				begin
					n_s<=s6;
					o<=1'b1;
				end
			else if(coin_ip==2'b11)//checks whether Nickel -11 (consider value of 15)
				begin 
					n_s<=s6;
					o<=1'b1;
				end
			else					//else assign 0 to output
				begin
					n_s<=s5;
					o<=1'b0;
				end
		s6:if(coin_ip==2'b00)//checks whether Quarter -00(consider value of 5)
				begin
					n_s<=s0;
					o<=1'b0;
				end
			else if(coin_ip==2'b01)//checks whether Dime -01(consider value of 10)
				begin
					n_s<=s0;
					o<=1'b0;
				end
			else if(coin_ip==2'b11)//checks whether Nickel -11 (consider value of 15)
				begin
					n_s<=s0;
					o<=1'b0;
				end
			else					//else assign 0 to output
				begin
					n_s<=s6;
					o<=1'b0;
				end
		 default:				//default segment
				begin
				n_s<=s0;			//starts from the state 1
				o<=1'b0;			//output assigned as zero
				end
		endcase
end
endmodule
		
